def nuget = "D:\\Nuget\\nuget.exe";
def nunitPath = "C:\\PROGRA~2\\NUnit.org\\nunit-console\\nunit3-console.exe";
pipeline {
agent {
    label {
      label ''
      customWorkspace 'D:\\jenkins\\workspace\\cicd'
    }
  }
stages {
        stage('Restore packages'){
           steps{
               bat("${nuget} restore ${workspace}\\DotNet_App.sln")
             }
        }
          
        stage('Checkout') {
            steps {
                git url: 'https://github.com/vinayakbagalkoti-accion/DotNet_App', branch: 'master'
            }
        }
        
        stage('Clean') {
            steps {
                bat "\"${tool 'MSBuild'}\" ${workspace}\\DotNet_App.sln /t:clean"
            }
        }
        
        stage('Build') {
            steps {
                bat "\"${tool 'MSBuild'}\" ${workspace}\\DotNet_App.sln /t:build"
            }
        }
        
        stage('Unit Testing') {
            steps {
                script {
                bat "${nunitPath} ${workspace}\\UnitTestSample\\UnitTestSample.csproj --config=Debug --result=./testresults/TestResult.xml;format=nunit2"
                step([$class: 'NUnitPublisher', testResultsPattern: 'testresults/*.xml', debug: false, failIfNoResults: true])
                bat "\"${workspace}\\packages\\ReportUnit.1.2.1\\tools\\ReportUnit.exe\" ./testresults/TestResult.xml"
                }
            }
        }
        
        stage('Sonar Cloud Analysis') {
            steps {
                bat "\"${tool 'sonarcube'}\" -Dsonar.projectKey=vinayakbagalkoti-accion_DotNet_App -Dsonar.organization=vinayakbagalkoti-accion -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=\"e54a16abc9aad2bd63e17d3a8f30ff8b96ef2ee8\""
            }
        }
        
        stage ("Approval for DIT") {
            steps {
                script {
                //currentBuild.getRawBuild().getExecutor().interrupt(Result.SUCCESS)
                def tok = UUID.randomUUID().toString()
                mail (to: 'vinayak.bagalkoti@accionlabs.com',
                mimeType: 'text/html',
                subject: "Pre-deployment approval pending '${env.JOB_BASE_NAME}' (${env.BUILD_NUMBER})",
                body: """Hello Dev ! Do you want to proceed with DIT deployment.
                Please click <a href="${env.BUILD_URL}input">here</a> to Approve/Reject Deployment""");
                    
                timeout(time:1, unit:'HOURS') {
                input message: 'Hello Dev ! Do you want to proceed with DIT deployment?',token: tok
                }
                //build.getExecutor().interrupt(Result.SUCCESS)
                }
            }
        }
           
        stage('Deploy to DIT') {
            steps {
                script {
                bat "\"${tool 'MSBuild'}\" ${workspace}\\DotNet_App.sln /p:DeployOnBuild=true /p:DeployDefaultTarget=WebPublish /p:WebPublishMethod=FileSystem /p:SkipInvalidConfigurations=true /t:build /p:Configuration=Release /p:Platform=\"Any CPU\" /p:DeleteExistingFiles=True /p:publishUrl=C:\\Jenkinsdeploy\\WebPipeline"
                mail bcc: '', body: "<b>Project:</b> ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL deploymenr build: ${env.BUILD_URL} <br> Unit Testing Report: ${env.BUILD_URL}testReport <br> Sonar Cloud Report: https://sonarcloud.io/dashboard?id=vinayakbagalkoti-accion_DotNet_App", cc: '', charset: 'UTF-8', from: '', mimeType: 'text/html', replyTo: '', subject: "BUILD SUCCESS CI CD - DIT: Project name -> ${env.JOB_NAME}", to: "vinayak.bagalkoti@accionlabs.com";
                }
            }
        }
        
        stage ("Send request to Release Manager for QA Deployment") {		//an arbitrary stage name
            steps {
                script {
                def tok = UUID.randomUUID().toString()
                mail (to: 'vinayak.bagalkoti@accionlabs.com',
                mimeType: 'text/html',
                subject: "Request '${env.JOB_BASE_NAME}' (${env.BUILD_NUMBER})",
                body: """If you want to release package to QA region please click <a href="${env.BUILD_URL}input">here</a> to send Request/Reject to release Manager""");
                    
                timeout(time:1, unit:'HOURS') {
                input message: 'If you want to release package to QA region please send request to release Manager?',token: tok
                }
                }
            }
        }
        
        stage ("Approval for QA from Release Manager") {		//an arbitrary stage name
            steps {
                script {
                def tok = UUID.randomUUID().toString()
                mail (to: 'rakesh.achar@accionlabs.com',
                mimeType: 'text/html',
                subject: "Pre-deployment approval pending '${env.JOB_BASE_NAME}' (${env.BUILD_NUMBER})",
                body: """Hello Approver ! Kindly approve to proceed with QA Deployment.
                Please click <a href="${env.BUILD_URL}input">here</a> to Approve/Reject Deployment""");
                    
                timeout(time:1, unit:'HOURS') {
                input message: 'Hello Approver ! Kindly approve to proceed with QA Deployment?',token: tok
                }
                }
            }
        }
        
        stage ("Deploy to QA") {		//an arbitrary stage name
            steps {
                build '.Net_PipeLine_CICD_QA'	//this is where we specify which job to invoke.
            }
        }
    }
    post {
        failure{
            mail bcc: '',body: "<b>Project:</b> ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL de build: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: '', mimeType: 'text/html', replyTo: '', subject: "BUILD FAILURE CI CD - QA: Project name -> ${env.JOB_NAME}", to: "vinayak.bagalkoti@accionlabs.com";
        }
    }
}